Program ::= DeclList
DeclList ::= Decl
DeclList ::= Decl DeclList

Decl ::= VariableDecl
Decl ::= FunctionDecl
Decl ::= ClassDecl
Decl ::= InterfaceDecl

Type ::= _int
Type ::= _double
Type ::= _bool
Type ::= _string
Type ::= _id
Type ::= Type _leftbracket _rightbracket

TypeID ::= Type _id

TypeOrVoidID ::= TypeID
TypeOrVoidID ::= _void _id

VariableDecl ::= TypeID _semicolon

FunctionDecl ::= TypeOrVoidID _leftparen Formals _rightparen StmtBlock
FunctionDecl ::= TypeOrVoidID _leftparen _rightparen StmtBlock

Formals ::= VariableList
VariableList ::= TypeID
VariableList ::= TypeID _comma VariableList

ClassDecl ::= _class _id OptionalExtends OptionalImplements _leftbrace OptionalFields _rightbrace
ClassDecl ::= _class _id OptionalImplements _leftbrace OptionalFields _rightbrace
ClassDecl ::= _class _id _leftbrace OptionalFields _rightbrace
ClassDecl ::= _class _id OptionalImplements _leftbrace OptionalFields _rightbrace
ClassDecl ::= _class _id OptionalExtends OptionalImplements _leftbrace _rightbrace
ClassDecl ::= _class _id OptionalImplements _leftbrace _rightbrace
ClassDecl ::= _class _id _leftbrace _rightbrace
ClassDecl ::= _class _id OptionalImplements _leftbrace _rightbrace
OptionalExtends ::= _extends _id
OptionalImplements ::= _implements IDList
IDList ::= _id
IDList ::= _id _comma IDList
OptionalFields ::= Field OptionalFields

Field ::= VariableDecl
Field ::= FunctionDecl

InterfaceDecl ::= _interface _id _leftbrace OptionalPrototypes _rightbrace
InterfaceDecl ::= _interface _id _leftbrace _rightbrace
OptionalPrototypes ::= Prototype OptionalPrototypes

Prototype ::= TypeOrVoidID _leftparen Formals _rightparen _semicolon

StmtBlock ::= _leftbrace OptionalVariableDecls OptionalStmts _rightbrace
StmtBlock ::= _leftbrace OptionalStmts _rightbrace
StmtBlock ::= _leftbrace OptionalVariableDecls _rightbrace
StmtBlock ::= _leftbrace _rightbrace
OptionalVariableDecls ::= VariableDecl OptionalVariableDecls
OptionalStmts ::= Stmt OptionalStmts

Stmt ::= _semicolon
Stmt ::= Expr _semicolon
Stmt ::= IfStmt
Stmt ::= WhileStmt
Stmt ::= ForStmt
Stmt ::= BreakStmt
Stmt ::= ReturnStmt
Stmt ::= PrintStmt
Stmt ::= StmtBlock

IfStmt ::= _if _leftparen Expr _rightparen Stmt OptionalElse
IfStmt ::= _if _leftparen Expr _rightparen Stmt
OptionalElse ::= _else Stmt

WhileStmt ::= _while _leftparen Expr _rightparen Stmt

ForStmt ::= _for _leftparen OptionalExpr _semicolon Expr _semicolon OptionalExpr _rightparen Stmt
ForStmt ::= _for _leftparen OptionalExpr _semicolon Expr _semicolon _rightparen Stmt
ForStmt ::= _for _leftparen _semicolon Expr _semicolon OptionalExpr _rightparen Stmt
ForStmt ::= _for _leftparen _semicolon Expr _semicolon _rightparen Stmt

BreakStmt ::= _break _semicolon

ReturnStmt ::= _return OptionalExpr _semicolon
ReturnStmt ::= _return _semicolon

PrintStmt ::= _println _leftparen ExprList _rightparen _semicolon

Expr ::= Lvalue _assignop Expr
Expr ::= Constant
Expr ::= Lvalue
Expr ::= Call
Expr ::= _leftparen Expr _rightparen
Expr ::= Expr _plus Expr
Expr ::= Expr _minus Expr
Expr ::= Expr _multiplication Expr
Expr ::= Expr _division Expr
Expr ::= _minus Expr
Expr ::= Expr _greater Expr
Expr ::= Expr _greaterequal Expr
Expr ::= Expr _less Expr
Expr ::= Expr _lessequal Expr
Expr ::= Expr _equal Expr
Expr ::= Expr _notequal Expr
Expr ::= Expr _and Expr
Expr ::= Expr _or Expr
Expr ::= _not Expr
Expr ::= _readln _leftparen _rightparen
Expr ::= _newarray _leftparen _intconstant _comma Type _rightparen

ExprList ::= Expr
ExprList ::= Expr _comma ExprList

OptionalExpr ::= Expr

Lvalue ::= _id
Lvalue ::= Expr _leftbracket Expr _rightbracket
Lvalue ::= Expr _period _id

Call ::= _id _leftparen Actuals _rightparen
Call ::= _id _leftparen _rightparen
Call ::= _id _period _id _leftparen Actuals _rightparen
Call ::= _id _period _id _leftparen _rightparen

Actuals ::= ExprList

Constant ::= _intconstant
Constant ::= _doubleconstant
Constant ::= _stringconstant
Constant ::= _boolconstant